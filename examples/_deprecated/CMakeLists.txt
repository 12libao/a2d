# include A2D headers
include_directories(${A2D_ROOT_DIR}/include)

# Set up paropt library and dependencies
find_package(MPI REQUIRED)
link_directories($ENV{HOME}/git/paropt/lib)
include_directories(${MPI_INCLUDE_PATH})
include_directories($ENV{HOME}/git/paropt/src)

# Copy over file
configure_file(${CMAKE_SOURCE_DIR}/examples/basic/tetra_3d.vtk.in tetra_3d.vtk COPYONLY)

# Add targets
add_executable(test_feelement test_feelement.cpp)
add_executable(verify_element verify_element.cpp)
add_executable(verify_L2element verify_L2element.cpp)
add_executable(topology topology.cpp)
add_executable(spectral spectral.cpp)
add_executable(sphere sphere.cpp)
add_executable(multiphysics multiphysics.cpp)
add_executable(elasticity elasticity.cpp)
add_executable(hdiv hdiv.cpp)
add_executable(test_grad_hess test_grad_hess.cpp)
add_executable(test_numeric test_numeric.cpp)
add_executable(toy_helmholtz toy_helmholtz.cpp)
add_executable(toy_profiler toy_profiler.cpp)
add_executable(toy_readvtk toy_readvtk.cpp)
add_executable(toy_tetramesh toy_tetramesh.cpp)

# Link to kokkos, note that linking to kokkos must happen before
# liking to OpenMP::OpenMP, otherwise it might cause compile error
target_link_libraries(test_feelement Kokkos::kokkos)
target_link_libraries(topology Kokkos::kokkos)
target_link_libraries(spectral Kokkos::kokkos)
target_link_libraries(sphere Kokkos::kokkos)
target_link_libraries(multiphysics Kokkos::kokkos)
target_link_libraries(verify_element Kokkos::kokkos)
target_link_libraries(verify_L2element Kokkos::kokkos)
target_link_libraries(elasticity Kokkos::kokkos)
target_link_libraries(hdiv Kokkos::kokkos)
target_link_libraries(test_grad_hess Kokkos::kokkos)
target_link_libraries(test_numeric Kokkos::kokkos)
target_link_libraries(toy_helmholtz Kokkos::kokkos)
target_link_libraries(toy_profiler Kokkos::kokkos)
target_link_libraries(toy_readvtk Kokkos::kokkos)
target_link_libraries(toy_tetramesh Kokkos::kokkos)

# Link libraries
target_link_libraries(test_feelement OpenMP::OpenMP_CXX LAPACK::LAPACK)
target_link_libraries(multiphysics OpenMP::OpenMP_CXX LAPACK::LAPACK)
target_link_libraries(verify_L2element OpenMP::OpenMP_CXX LAPACK::LAPACK)
target_link_libraries(topology OpenMP::OpenMP_CXX LAPACK::LAPACK)
target_link_libraries(spectral OpenMP::OpenMP_CXX LAPACK::LAPACK)
target_link_libraries(sphere OpenMP::OpenMP_CXX LAPACK::LAPACK)
target_link_libraries(elasticity OpenMP::OpenMP_CXX LAPACK::LAPACK)
target_link_libraries(hdiv OpenMP::OpenMP_CXX LAPACK::LAPACK)
target_link_libraries(test_grad_hess OpenMP::OpenMP_CXX LAPACK::LAPACK)
target_link_libraries(test_numeric OpenMP::OpenMP_CXX LAPACK::LAPACK)
target_link_libraries(toy_helmholtz OpenMP::OpenMP_CXX LAPACK::LAPACK)
target_link_libraries(toy_profiler OpenMP::OpenMP_CXX LAPACK::LAPACK)
target_link_libraries(toy_readvtk OpenMP::OpenMP_CXX LAPACK::LAPACK)
target_link_libraries(toy_tetramesh OpenMP::OpenMP_CXX LAPACK::LAPACK)

# If using gcc and version < 9, need to explicitly link to filesystem
if(CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
    if(CMAKE_CXX_COMPILER_VERSION VERSION_LESS 9)
        message("Using GCC ${CMAKE_CXX_COMPILER_VERSION} < 9.0.0, explicitly link to stdc++fs")
        target_link_libraries(test_feelement stdc++fs)
        target_link_libraries(multiphysics stdc++fs)
        target_link_libraries(verify_L2element stdc++fs)
        target_link_libraries(topology stdc++fs)
        target_link_libraries(spectral stdc++fs)
        target_link_libraries(sphere stdc++fs)
        target_link_libraries(elasticity stdc++fs)
        target_link_libraries(test_grad_hess stdc++fs)
        target_link_libraries(test_numeric stdc++fs)
        target_link_libraries(toy_helmholtz stdc++fs)
        target_link_libraries(toy_profiler stdc++fs)
        target_link_libraries(toy_readvtk stdc++fs)
        target_link_libraries(toy_tetramesh stdc++fs)
    endif()
endif()

add_subdirectory(rigid_body)
add_subdirectory(paropt)
